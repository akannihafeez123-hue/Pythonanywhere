from flask import Flask, jsonify, request
import threading, time, requests, os
# Install the library if it's not already present
!pip install --quiet python-telegram-bot
from telegram import Bot

app = Flask(__name__)

# ===========================
# Environment Variables
# ===========================
STORJ_API = os.getenv("1LBi1ywRz8bSPpxGXaS75C9n8GNN2uz9hg5FAQEQpx1QWznQSzh2rMEParNFQvqxxwFfRAjH93N3jAMwmKiGAn8XLv5JGXbq5RjL57ALm5JDPByf4C6zh25JfU4o9o2fNfreeStBSEUzkDEGpDidzhnXdP5KPhz15uR7H4284bcqVxYzYYRipYY23hLSUcCiQ4xXwnZSQkk7Y2kDu7UN4NsKqhB7miCvyQFtHR1t8dKQXDeWHCXxHQh2zWs2ke5gUCFGRJzqaaWMC1HMRokfLmH2nvo2qfT8f1")
VASTAI_API = os.getenv("VASTAI_API")
TELEGRAM_TOKEN = os.getenv("8182149660:AAHlFg2fsBNIagiOi3vXDi26NnAD2ssJB2w")
TELEGRAM_CHAT_ID = os.getenv("7675613085")

KEEP_ALIVE_INTERVAL = 300         # 5 min
EARNINGS_CHECK_INTERVAL = 600     # 10 min
DAILY_REPORT_INTERVAL = 86400     # 24 hours

bot = Bot(token=TELEGRAM_TOKEN)
# ===========================
# Track last earnings
# ===========================
last_storj_earnings = 0
last_vastai_earnings = 0

# ===========================
# Internal Microservices Sales Data
# ===========================
sales_data = {
    "service_1": {"sales": 0, "earnings": 0.0},
    "service_2": {"sales": 0, "earnings": 0.0},
    "service_3": {"sales": 0, "earnings": 0.0}
}
last_micro_earnings = 0

# ===========================
# Helper to fetch external earnings
# ===========================
def fetch_earnings(api_url):
    try:
        resp = requests.get(api_url, timeout=10).json()
        return float(resp.get("earnings", 0))
    except:
        return 0

# ===========================
# Keep-alive task
# ===========================
def keep_alive_task():
    while True:
        try:
            requests.get(STORJ_API, timeout=10)
            requests.get(VASTAI_API, timeout=10)
        except:
            pass
        time.sleep(KEEP_ALIVE_INTERVAL)

# ===========================
# Earnings monitor (real-time Telegram alerts)
# ===========================
def earnings_monitor_task():
    global last_storj_earnings, last_vastai_earnings, last_micro_earnings
    while True:
        # Storj
        current_storj = fetch_earnings(STORJ_API)
        if current_storj > last_storj_earnings:
            bot.send_message(
                TELEGRAM_CHAT_ID,
                f"ðŸ’° New Storj earnings: ${current_storj - last_storj_earnings:.2f}"
            )
            last_storj_earnings = current_storj

        # Vast.ai
        current_vastai = fetch_earnings(VASTAI_API)
        if current_vastai > last_vastai_earnings:
            bot.send_message(
                TELEGRAM_CHAT_ID,
                f"ðŸ’° New Vast.ai earnings: ${current_vastai - last_vastai_earnings:.2f}"
            )
            last_vastai_earnings = current_vastai

        # Microservices
        total_micro = sum(s["earnings"] for s in sales_data.values())
        if total_micro > last_micro_earnings:
            bot.send_message(
                TELEGRAM_CHAT_ID,
                f"ðŸ’° New Microservice earnings: ${total_micro - last_micro_earnings:.2f}"
            )
            last_micro_earnings = total_micro

        time.sleep(EARNINGS_CHECK_INTERVAL)

# ===========================
# Daily report
# ===========================
def daily_report_task():
    while True:
        message = (
            f"ðŸ“Š Daily Earnings Report:\n"
            f"Storj: ${last_storj_earnings:.2f}\n"
            f"Vast.ai: ${last_vastai_earnings:.2f}\n"
            f"Microservices: ${last_micro_earnings:.2f}"
        )
        try:
            bot.send_message(TELEGRAM_CHAT_ID, message)
        except:
            pass
        time.sleep(DAILY_REPORT_INTERVAL)

# ===========================
# Start background threads
# ===========================
threading.Thread(target=keep_alive_task, daemon=True).start()
threading.Thread(target=earnings_monitor_task, daemon=True).start()
threading.Thread(target=daily_report_task, daemon=True).start()

# ===========================
# Flask Endpoints
# ===========================
@app.route('/')
def index():
    return "Hidden Bot Running"

@app.route('/ping')
def ping():
    return "pong"

# External Earnings Endpoints
@app.route('/storj')
def storj_status():
    return jsonify({"earnings": last_storj_earnings})

@app.route('/vastai')
def vastai_status():
    return jsonify({"earnings": last_vastai_earnings})

# ===========================
# Internal Microservice Endpoints
# ===========================
@app.route('/microservices', methods=['GET'])
def get_microservices():
    total = sum(s["earnings"] for s in sales_data.values())
    return jsonify({"total_earnings": total, "services": sales_data})

@app.route('/microservices/sale', methods=['POST'])
def add_micro_sale():
    data = request.get_json()
    service = data.get("service")
    amount = float(data.get("amount", 0))

    if service in sales_data:
        sales_data[service]["sales"] += 1
        sales_data[service]["earnings"] += amount
        return jsonify({"status": "success", "service": service, "new_total": sales_data[service]["earnings"]})
    else:
        return jsonify({"status": "error", "message": "Service not found"}), 400

# ===========================
# Run Flask
# ===========================
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
